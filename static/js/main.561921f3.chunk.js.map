{"version":3,"sources":["MainDisplay.tsx","Button.tsx","LimitValueInput.tsx","Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx","Settings.module.css"],"names":["MainDisplay","props","Display","error","DisplayMainValue","limitReached","finish","mainValue","DisplayAdditionalInfoWrapper","CurrentLimitValue","value1Label","value1","value2Label","value2","styled","div","Button","BlueButton","disabled","onClick","callback","name","button","LimitValueInput","LimitValueSetContainer","style","paddingRight","marginRight","label","LimitInputField","display","height","paddingTop","paddingBottom","currentValue","LimitValueControlsWrapper","LimitValueControlButtons","input","Settings","useState","minValue","setMinValue","maxValue","setMaxValue","setError","useEffect","limitsChangedCallback","visibility","visible","s","settingsVisible","settingsInvisible","SettingsWrapper","className","newValue","newMax","newMin","CounterWrapper","MainBoardWrapper","ControlsWrapper","App","tempLimitsValues","setTempLimitsValues","counter","setCounter","paramsVisible","setParamsVisible","resetCounter","max","min","changeTempLocalState","Boolean","indicatorValue","localStorage","setItem","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.561921f3.chunk.js","sourcesContent":["import styles from \"./Indicator.module.css\"\r\nimport React, {useState} from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\ntype IndicatorPropsType = {\r\n    mainValue: number\r\n    error: string\r\n    value1: number\r\n    value2: number\r\n    value1Label: string\r\n    value2Label: string\r\n    finish: boolean\r\n\r\n}\r\nexport const MainDisplay = (props: IndicatorPropsType) => {\r\n    // const[error, setError] = useState('')\r\n    return (\r\n        <Display error={props.error}>\r\n            <DisplayMainValue error={props.error} limitReached={props.finish}>\r\n                {props.error ? props.error : props.mainValue}\r\n            </DisplayMainValue>\r\n            <DisplayAdditionalInfoWrapper>\r\n                <CurrentLimitValue>{props.value1Label}: {props.value1}</CurrentLimitValue>\r\n                <CurrentLimitValue>{props.value2Label}: {props.value2}</CurrentLimitValue>\r\n            </DisplayAdditionalInfoWrapper>\r\n        </Display>\r\n\r\n    )\r\n}\r\n\r\n\r\ninterface DisplayProps {\r\n    error: string\r\n}\r\n\r\nconst Display = styled.div<DisplayProps>`\r\n  position: relative;\r\n  background-color: #50717b; /*for compatibility with older browsers*/\r\n  background-image: linear-gradient(#50717b, #8ecccc);\r\n  height: 100px;\r\n  border-radius: 10px;\r\n  font-size: 50px;\r\n  text-align: center;\r\n  color: #3a4042;\r\n  font-weight: bold;\r\n  /*border: 1px solid red;*/\r\n  display: flex;\r\n  flex-direction: column;\r\n  box-shadow: rgba(44, 187, 99, .35) 0 -25px 18px -14px inset, rgba(44, 187, 99, .25) 0 1px 2px, rgba(44, 187, 99, .25) 0 2px 4px, rgba(44, 187, 99, .25) 0 4px 8px, rgba(44, 187, 99, .25) 0 8px 16px, rgba(44, 187, 99, .25) 0 16px 32px;\r\n  justify-content: flex-end;\r\n\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n    top: 2px;\r\n    left: 2px;\r\n    width: calc(100% - 4px);\r\n    height: 50%;\r\n    /*width: 300px;*/\r\n    background: linear-gradient(rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.2));\r\n    border-radius: 10px 10px 0 0;\r\n  }\r\n`\r\n\r\ninterface DisplayMainValueProps {\r\n    error: string\r\n    limitReached: boolean\r\n}\r\n\r\nconst DisplayMainValue = styled.div<DisplayMainValueProps>`\r\n  //border: 1px solid yellow;\r\n  height: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  //align-items: flex-end;\r\n  align-items: ${props => props.error ? \"center\" : \"flex-end\"};\r\n  font-size: ${props => props.error ? \"18px\" : \"\"};\r\n  padding-top: ${props => props.error ? \"14px\" : \"\"};\r\n  color: ${props => props.limitReached || props.error ? \"rgba(180,53,53,0.6)\" : \"\"};\r\n`\r\nconst DisplayAdditionalInfoWrapper = styled.div`\r\n  display: flex;\r\n  padding: 0;\r\n  /*flex-direction: column;*/\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 8px;\r\n  /*border: 1px solid #fc0606;*/\r\n  /*width:100px;*/\r\n  /*height: 60px;*/\r\n`\r\n\r\nconst CurrentLimitValue = styled.div`\r\n  /*height: 20px;*/\r\n  /*border: 1px solid #a722d9;*/\r\n  min-width: 100px;\r\n  padding-bottom: 3px;\r\n`","import styled from \"styled-components\";\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    indicatorValue: number\r\n    disabled: boolean\r\n    callback: () => void\r\n}\r\n\r\nexport const Button = (props: ButtonType) => {\r\n    const onClickHandler = () => {\r\n        props.callback();\r\n    }\r\n    return (\r\n        // <button className={styles.deepskyblueButton} onClick={onClickHandler}>{props.name}</button>\r\n        <BlueButton\r\n            disabled={props.disabled}\r\n            // className={`${props.disabled ? styles.disabled : \"\"}`}\r\n            onClick={onClickHandler}>{props.name}</BlueButton>\r\n    )\r\n}\r\n\r\n\r\nconst BlueButton = styled.button`\r\n  color: #212121;\r\n  font-size: 2em;\r\n  outline: none;\r\n  border: none;\r\n  background-color: ${props => props.disabled ? \"#505c5e\" : \"#8ecccc\"};\r\n  border-radius: 10px;\r\n  font-weight: bold;\r\n  height: 40px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  //box-shadow: 2px 2px #212121;\r\n  box-shadow: ${props => !props.disabled ? \"rgba(44, 187, 99, .35) 0 -25px 18px -14px inset, rgba(44, 187, 99, .25) 0 1px 2px, rgba(44, 187, 99, .25) 0 2px 4px, rgba(44, 187, 99, .25) 0 4px 8px, rgba(44, 187, 99, .25) 0 8px 16px, rgba(44, 187, 99, .25) 0 16px 32px\" : \"rgba(0, 0, 0, 0.19) 0px 10px 20px, rgba(0, 0, 0, 0.23) 0px 6px 6px\"};\r\n\r\n\r\n  &:hover {\r\n    background-color: ${props => !props.disabled ? \"#50717b\" : \"\"};\r\n  }\r\n\r\n  &:active {\r\n    background-color: #50717b;\r\n    box-shadow: 0 0 #666;\r\n    transform: translate(3px, 3px);\r\n  }\r\n\r\n`\r\nconst GlimmeringButton = styled.button`\r\n\r\n  background-color: #c2fbd7;\r\n  border-radius: 100px;\r\n  box-shadow: rgba(44, 187, 99, .2) 0 -25px 18px -14px inset, rgba(44, 187, 99, .15) 0 1px 2px, rgba(44, 187, 99, .15) 0 2px 4px, rgba(44, 187, 99, .15) 0 4px 8px, rgba(44, 187, 99, .15) 0 8px 16px, rgba(44, 187, 99, .15) 0 16px 32px;\r\n  color: green;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  font-family: CerebriSans-Regular, -apple-system, system-ui, Roboto, sans-serif;\r\n  padding: 7px 20px;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  transition: all 250ms;\r\n  border: 0;\r\n  font-size: 16px;\r\n  user-select: none;\r\n  -webkit-user-select: none;\r\n  touch-action: manipulation;\r\n\r\n  &:hover {\r\n    box-shadow: rgba(44, 187, 99, .35) 0 -25px 18px -14px inset, rgba(44, 187, 99, .25) 0 1px 2px, rgba(44, 187, 99, .25) 0 2px 4px, rgba(44, 187, 99, .25) 0 4px 8px, rgba(44, 187, 99, .25) 0 8px 16px, rgba(44, 187, 99, .25) 0 16px 32px;\r\n    transform: scale(1.05) rotate(-1deg);\r\n  }\r\n`","import React, {useRef, useState} from 'react';\r\nimport styled from \"styled-components\";\r\n\r\n\r\ntype LimitValueInput = {\r\n    label: string\r\n    currentValue: number\r\n    // compareWithValue: number\r\n    callback: (newValue: number) => void\r\n}\r\n\r\n\r\nexport const LimitValueInput = (props: LimitValueInput) => {\r\n\r\n    const plusClickHandler = () => {\r\n        props.callback(props.currentValue + 1)\r\n    }\r\n\r\n    const minusClickHandler = () => {\r\n        props.callback(props.currentValue - 1)\r\n    }\r\n\r\n    // const directInputHandler = (e: React.FormEvent<HTMLDivElement>) => {\r\n    //     debugger\r\n    //     props.callback(Number(e.currentTarget.innerText))\r\n    // }\r\n    //use contentEditable to allow direct input in div, with tabIndex={-1} you can listen keyDown event\r\n    //how to make flux cycle using div as input field?\r\n    //I could keep the value for Counter here with useState hook and save it to upper localState by pressing \"Set\" button but \"Set\" is in another component\r\n    //so there is no way to get the value on click event(?)\r\n    //would it be more logical than crating temporal local state in above component?\r\n\r\n\r\n    return (\r\n        <LimitValueSetContainer>\r\n            <label style={{paddingRight: \"40px\", marginRight: \"10px\"}}>{props.label}</label>\r\n            {/*<Input value={props.currentValue} type=\"number\" min={\"0\"} onChange={newValueHandler}/>*/}\r\n            <LimitInputField><span\r\n                style={{\r\n                    // border: \"1px solid black\",\r\n                    display: \"inline-block\",\r\n                    height: \"100%\",\r\n                    paddingTop: \"10%\",\r\n                    paddingBottom: 0\r\n                }}>{props.currentValue}</span></LimitInputField>\r\n            <LimitValueControlsWrapper>\r\n                <LimitValueControlButtons\r\n                    onClick={plusClickHandler}>+</LimitValueControlButtons>\r\n                <LimitValueControlButtons onClick={minusClickHandler}>-</LimitValueControlButtons>\r\n            </LimitValueControlsWrapper>\r\n        </LimitValueSetContainer>\r\n    );\r\n};\r\n\r\n\r\nconst LimitValueSetContainer = styled.div`\r\n  width: 85%;\r\n  color: #8ecccc;\r\n  font-weight: bold;\r\n  display: flex;\r\n  padding: 10px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-radius: 10px;\r\n  //border: 1px solid #8ecccc;\r\n  margin-bottom: 5px;\r\n  margin-top: 5px;\r\n  //flex-direction: column;\r\n`\r\n\r\nconst LimitValueControlsWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-left: 3px;\r\n`\r\n\r\nconst LimitValueControlButtons = styled.button`\r\n  cursor: pointer;\r\n  background-color: #8ecccc;\r\n  outline: none;\r\n  border: none;\r\n  margin: 1px;\r\n  width: 15px;\r\n  height: 15px;\r\n  border-radius: 3px;\r\n  //box-shadow: 2px 2px #212121;\r\n  box-shadow: rgba(44, 187, 99, .35) 0 -25px 18px -14px inset, rgba(44, 187, 99, .25) 0 1px 2px, rgba(44, 187, 99, .25) 0 2px 4px, rgba(44, 187, 99, .25) 0 4px 8px, rgba(44, 187, 99, .25) 0 8px 16px, rgba(44, 187, 99, .25) 0 16px 32px;\r\n\r\n  font-weight: bold;\r\n  padding: 0;\r\n\r\n  &:hover {\r\n    background-color: #50717b;\r\n  }\r\n\r\n  &:active {\r\n    background-color: #50717b;\r\n    box-shadow: 0 0 #666;\r\n    transform: translate(1px, 1px);\r\n  }\r\n`\r\n\r\nconst Input = styled.input`\r\n  width: 60px;\r\n  height: 35px;\r\n  font-size: 16px;\r\n  display: inline-block;\r\n  background-color: #50717b; /*for compatibility with older browsers*/\r\n  background-image: linear-gradient(#50717b, #8ecccc);\r\n  outline: none;\r\n  border-radius: 5px;\r\n  border: 2px solid #8ecccc;\r\n  //border: none;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  appearance: none;\r\n  //no pseudo-elements for input and other non-container things\r\n`\r\n\r\nconst LimitInputField = styled.div`\r\n  width: 60px;\r\n  height: 35px;\r\n  color: black;\r\n  font-size: 16px;\r\n  display: flex;\r\n  background-color: #50717b; /*for compatibility with older browsers*/\r\n  background-image: linear-gradient(#50717b, #8ecccc);\r\n  border-radius: 5px;\r\n  border-top: 1px solid #50717b;\r\n  border-left: 1px solid #50717b;\r\n  border-right: 1px solid #50717b;\r\n  //border: none;\r\n  font-weight: bold;\r\n  justify-content: center;\r\n  //align-items: center; //couldn't position pseudo-element in the right place so I went with some workarounds\r\n  outline: none;\r\n  box-shadow: rgba(44, 187, 99, .35) 0 -25px 18px -14px inset, rgba(44, 187, 99, .25) 0 1px 2px, rgba(44, 187, 99, .25) 0 2px 4px, rgba(44, 187, 99, .25) 0 4px 8px, rgba(44, 187, 99, .25) 0 8px 16px, rgba(44, 187, 99, .25) 0 16px 32px;;\r\n\r\n  &::after { //\"::\" - pseudo element, \":\" - pseudo-class\r\n    content: '';\r\n    position: absolute;\r\n    //top: 1px;\r\n    //left: 1px;\r\n    width: 60px;\r\n    height: 18px;\r\n    background: linear-gradient(rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.2));\r\n    border-radius: 5px 5px 0 0;\r\n  }\r\n`\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport s from \"./Settings.module.css\"\r\nimport {LimitValueInput} from \"./LimitValueInput\";\r\nimport styled from \"styled-components\";\r\n\r\ntype SettingsPropsType = {\r\n    error: string\r\n    visible: boolean\r\n    maxValue: number\r\n    minValue: number\r\n    // minChangedCallback: (newValue: number) => void\r\n    // maxChangedCallback: (newValue: number) => void\r\n    limitsChangedCallback: (newMax: number, newMin: number) => void\r\n}\r\n\r\nexport const Settings = (props: SettingsPropsType) => {\r\n\r\n    const [minValue, setMinValue] = useState<number>(props.minValue)\r\n    const [maxValue, setMaxValue] = useState<number>(props.maxValue)\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const validateNewMax = (newMax: number) => {\r\n\r\n        if (newMax > minValue) {\r\n            setError(false)\r\n            setMaxValue(newMax)\r\n            // limitsChangedHandler()\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    const validateNewMin = (newMin: number) => {\r\n        if (newMin < maxValue) {\r\n            setError(false)\r\n            setMinValue(newMin)\r\n            // limitsChangedHandler()\r\n\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const limitsChangedHandler = () => {\r\n        props.limitsChangedCallback(maxValue, minValue)\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.limitsChangedCallback(maxValue, minValue)\r\n    }, [maxValue, minValue])\r\n\r\n    let visibility = `${props.visible ? s.settingsVisible : s.settingsInvisible}`\r\n    // let settingsClassName = `${s.settingsVisible} ${s.settingsWrapper}`\r\n    // let settingsClassName = `${s.settingsWrapper}`\r\n    // let settingsClassName = `${props.visible ? s.showHidden : s.slowlyHide} ${s.settingsWrapper}`\r\n    //how to make slider animation with styled components??\r\n\r\n\r\n    return (\r\n        <SettingsWrapper className={visibility}>\r\n            <LimitValueInput label={\"max value\"} currentValue={maxValue}\r\n                             callback={(newValue) => validateNewMax(newValue)}/>\r\n            <LimitValueInput label={\"min value\"} currentValue={minValue}\r\n                             callback={(newValue) => validateNewMin(newValue)}/>\r\n        </SettingsWrapper>\r\n    );\r\n};\r\n\r\n\r\nconst SettingsWrapper = styled.div`\r\n  /*position: relative;*/\r\n  z-index: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  background-color: #3a4042;\r\n  width: 250px;\r\n  heigth: 500px;\r\n  border: 3px solid #8ecccc;\r\n  border-bottom: none;\r\n  border-radius: 10px 10px 0 0;\r\n  //box-shadow: 0 4px 8px 0 rgb(33, 33, 33), 0 6px 20px 0 rgb(33, 33, 33);\r\n  box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px;\r\n  /*max-height: 0;*/\r\n  /*overflow: hidden;*/\r\n`\r\n\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport s from \"./App.module.css\";\nimport {MainDisplay} from \"./MainDisplay\";\nimport {Button} from \"./Button\";\nimport {Settings} from \"./Settings\";\nimport styled from \"styled-components\";\n\nfunction App() {\n\n    //BLL should be placed in localStorage to imitate server data ?\n    // let MIN_VALUE = 0;\n    // let MAX_VALUE = 5;\n\n    // const [limits, setLimits] = useState<Array<number>>([0, 1])\n    const [tempLimitsValues, setTempLimitsValues] = useState<Array<number>>([0, 0]) //how do I use set if inputs for max/min live in another component?\n\n    const [minValue, setMinValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(5)\n\n    const [counter, setCounter] = useState<number>(minValue)\n    const [error, setError] = useState('')\n    const [paramsVisible, setParamsVisible] = useState(false)\n\n    const incrementCounter = () => {\n        debugger\n        if (!paramsVisible && counter < maxValue) {\n            setError('')\n            setCounter(counter + 1)\n        }\n        if (paramsVisible) {\n            setError('set your counter')\n        }\n    }\n\n    const resetCounter = () => {\n        setCounter(minValue) //no rerender if min have not changed\n    }\n    const setLimitsHandler = () => {\n        if (paramsVisible) {\n            // MIN_VALUE = minValue\n            // MAX_VALUE = maxValue\n            setMaxValue(tempLimitsValues[0])\n            setMinValue(tempLimitsValues[1])\n            localStorage.setItem('maxValue', JSON.stringify(maxValue))\n            localStorage.setItem('minValue', JSON.stringify(minValue))\n            setError('')\n            setParamsVisible(false)\n            // resetCounter()\n        } else {\n            setParamsVisible(true)\n        }\n    }\n    const changeTempLocalState = (max: number, min: number) => {\n        debugger\n        setTempLimitsValues([max, min])\n    }\n\n    useEffect(() => {\n        resetCounter()\n    }, [maxValue, minValue])\n\n    // let mainDisplayClassName = `${counter === maxValue ? s.limitReached : \"\"} ${error ? s.errorMessage : \"\"}`\n\n    return (\n        <CounterWrapper>\n            <Settings visible={paramsVisible}\n                      error={error}\n                      maxValue={maxValue}\n                      minValue={minValue}\n                      limitsChangedCallback={(max, min) => {\n                          changeTempLocalState(max, min)\n                      }}\n            />\n            <MainBoardWrapper>\n                <MainDisplay mainValue={counter} error={error} value1={maxValue} value2={minValue} value1Label={\"max\"}\n                             value2Label={\"start\"} finish={counter === maxValue}/>\n                <ControlsWrapper>\n                    <Button disabled={counter === maxValue || Boolean(error)}\n                            name={\"inc\"}\n                            callback={incrementCounter}\n                            indicatorValue={counter}/>\n                    <Button disabled={counter === minValue || Boolean(error)}\n                            name={\"reset\"}\n                            callback={resetCounter}\n                            indicatorValue={counter}/>\n                    <Button disabled={false}\n                            name={\"set\"}\n                            callback={setLimitsHandler}\n                            indicatorValue={counter}/>\n                </ControlsWrapper>\n            </MainBoardWrapper>\n        </CounterWrapper>\n\n    )\n}\n\n\nconst CounterWrapper = styled.div`\n  /*border: 2px solid black;*/\n  width: 330px;\n  height: 500px;\n  display: flex;\n  flex-direction: column;\n  /*flex-wrap: wrap;*/\n  justify-content: center;\n  align-items: center;\n\n`\n\nconst MainBoardWrapper = styled.div`\n  z-index: 3;\n  width: 300px;\n  height: 200px;\n  border: 3px solid #8ecccc;\n  padding: 10px;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n  background-color: #3a4042;\n  /*box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);*/\n  box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px;\n`\n\nconst ControlsWrapper = styled.div`\n  border: 3px solid #8ecccc;\n  margin-top: 20px;\n  border-radius: 10px;\n  height: 40%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding-left: 10px;\n  padding-right: 10px;\n`\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Settings_error__2b7fW\",\"paramWrapper\":\"Settings_paramWrapper__3okcM\",\"settingsInvisible\":\"Settings_settingsInvisible__2M8VD\",\"settingsVisible\":\"Settings_settingsVisible__3q2zK\",\"hidden\":\"Settings_hidden__1zvom\",\"slowlyHide\":\"Settings_slowlyHide__lYERP\",\"showHidden\":\"Settings_showHidden__2WV04\"};"],"sourceRoot":""}