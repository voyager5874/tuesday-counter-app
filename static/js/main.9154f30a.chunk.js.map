{"version":3,"sources":["Button.tsx","LimitValueInput.tsx","Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx","App.module.css","Settings.module.css"],"names":["Button","props","BlueButton","disabled","onClick","callback","name","styled","button","LimitValueInput","LimitValueSetContainer","style","paddingRight","marginRight","label","LimitInputField","display","height","paddingTop","paddingBottom","currentValue","LimitValueControlsWrapper","LimitValueControlButtons","div","input","Settings","useState","minValue","setMinValue","maxValue","setMaxValue","setError","useEffect","limitsChangedCallback","settingsClassName","visible","s","settingsVisible","settingsInvisible","SettingsWrapper","className","newValue","newMax","newMin","CounterWrapper","CounterDisplay","CounterDisplayMainValue","App","tempLimitsValues","setTempLimitsValues","counter","setCounter","error","paramsVisible","setParamsVisible","resetCounter","mainDisplayClassName","limitReached","errorMessage","max","min","changeTempLocalState","mainBoardWrapper","currentSetContainer","currentSet","buttonContainer","Boolean","indicatorValue","localStorage","setItem","JSON","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.9154f30a.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\ntype ButtonType = {\r\n    name: string\r\n    indicatorValue: number\r\n    disabled: boolean\r\n    callback: () => void\r\n}\r\n\r\nexport const Button = (props: ButtonType) => {\r\n    const onClickHandler = () => {\r\n        props.callback();\r\n    }\r\n    return (\r\n        // <button className={styles.deepskyblueButton} onClick={onClickHandler}>{props.name}</button>\r\n        <BlueButton\r\n            disabled={props.disabled}\r\n            // className={`${props.disabled ? styles.disabled : \"\"}`}\r\n            onClick={onClickHandler}>{props.name}</BlueButton>\r\n    )\r\n}\r\n\r\n\r\nconst BlueButton = styled.button`\r\n  color: #212121;\r\n  font-size: 2em;\r\n  outline: none;\r\n  border: none;\r\n  background-color: ${props => props.disabled ? \"#505c5e\" : \"#8ecccc\"};\r\n  border-radius: 10px;\r\n  font-weight: bold;\r\n  height: 40px;\r\n  padding-left: 10px;\r\n  padding-right: 10px;\r\n  box-shadow: 3px 3px #212121;\r\n\r\n\r\n  &:hover {\r\n    background-color: ${props => !props.disabled ? \"#50717b\" : \"\"};\r\n  }\r\n\r\n  &:active {\r\n    background-color: #50717b;\r\n    box-shadow: 0 0 #666;\r\n    transform: translate(4px, 4px);\r\n  }\r\n\r\n`","import React, {useRef, useState} from 'react';\r\nimport styled from \"styled-components\";\r\n\r\n\r\ntype LimitValueInput = {\r\n    label: string\r\n    currentValue: number\r\n    // compareWithValue: number\r\n    callback: (newValue: number) => void\r\n}\r\n\r\n\r\nexport const LimitValueInput = (props: LimitValueInput) => {\r\n\r\n    const plusClickHandler = () => {\r\n        props.callback(props.currentValue + 1)\r\n    }\r\n\r\n    const minusClickHandler = () => {\r\n        props.callback(props.currentValue - 1)\r\n    }\r\n\r\n    // const directInputHandler = (e: React.FormEvent<HTMLDivElement>) => {\r\n    //     debugger\r\n    //     props.callback(Number(e.currentTarget.innerText))\r\n    // }\r\n    //use contentEditable to allow direct input in div, with tabIndex={-1} you can listen keyDown event\r\n    //how to make flux cycle using div as input field?\r\n    //I could keep value to set to Counter here with useState hook and save it to upper localState by pressing \"Set\" button\r\n    //would it be more logical than crating temporal local state in above component?\r\n\r\n\r\n    return (\r\n        <LimitValueSetContainer>\r\n            <label style={{paddingRight: \"40px\", marginRight: \"10px\"}}>{props.label}</label>\r\n            {/*<Input value={props.currentValue} type=\"number\" min={\"0\"} onChange={newValueHandler}/>*/}\r\n            <LimitInputField><span\r\n                style={{\r\n                    // border: \"1px solid black\",\r\n                    display: \"inline-block\",\r\n                    height: \"100%\",\r\n                    paddingTop: \"10%\",\r\n                    paddingBottom: 0\r\n                }}>{props.currentValue}</span></LimitInputField>\r\n            <LimitValueControlsWrapper>\r\n                <LimitValueControlButtons\r\n                    onClick={plusClickHandler}>+</LimitValueControlButtons>\r\n                <LimitValueControlButtons onClick={minusClickHandler}>-</LimitValueControlButtons>\r\n            </LimitValueControlsWrapper>\r\n        </LimitValueSetContainer>\r\n    );\r\n};\r\n\r\n\r\nconst LimitValueSetContainer = styled.div`\r\n  width: 85%;\r\n  color: #8ecccc;\r\n  font-weight: bold;\r\n  display: flex;\r\n  padding: 10px;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-radius: 10px;\r\n  //border: 1px solid #8ecccc;\r\n  margin-bottom: 5px;\r\n  margin-top: 5px;\r\n  //flex-direction: column;\r\n`\r\n\r\nconst LimitValueControlsWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-left: 3px;\r\n`\r\n\r\nconst LimitValueControlButtons = styled.button`\r\n  cursor: pointer;\r\n  background-color: #8ecccc;\r\n  outline: none;\r\n  border: none;\r\n  margin: 1px;\r\n  width: 15px;\r\n  height: 15px;\r\n  border-radius: 3px;\r\n  box-shadow: 2px 2px #212121;\r\n  font-weight: bold;\r\n  padding: 0;\r\n\r\n  &:hover {\r\n    background-color: #50717b;\r\n  }\r\n\r\n  &:active {\r\n    background-color: #50717b;\r\n    box-shadow: 0 0 #666;\r\n    transform: translate(1px, 1px);\r\n  }\r\n`\r\n\r\nconst Input = styled.input`\r\n  width: 60px;\r\n  height: 35px;\r\n  font-size: 16px;\r\n  display: inline-block;\r\n  background-color: #50717b; /*for compatibility with older browsers*/\r\n  background-image: linear-gradient(#50717b, #8ecccc);\r\n  outline: none;\r\n  border-radius: 5px;\r\n  border: 2px solid #8ecccc;\r\n  //border: none;\r\n  font-weight: bold;\r\n  text-align: center;\r\n  appearance: none;\r\n  //no pseudo-elements for input and other non-container things\r\n`\r\n\r\nconst LimitInputField = styled.div`\r\n  width: 60px;\r\n  height: 35px;\r\n  color: black;\r\n  font-size: 16px;\r\n  display: flex;\r\n  background-color: #50717b; /*for compatibility with older browsers*/\r\n  background-image: linear-gradient(#50717b, #8ecccc);\r\n  border-radius: 5px;\r\n  border-top: 1px solid #50717b;\r\n  border-left: 1px solid #50717b;\r\n  border-right: 1px solid #50717b;\r\n  //border: none;\r\n  font-weight: bold;\r\n  justify-content: center;\r\n  //align-items: center; //couldn't position pseudo-element in the right place so I went with some workarounds\r\n  outline: none;\r\n\r\n  &::after { //\"::\" - pseudo element, \":\" - pseudo-class\r\n    content: '';\r\n    position: absolute;\r\n    //top: 1px;\r\n    //left: 1px;\r\n    width: 60px;\r\n    height: 18px;\r\n    background: linear-gradient(rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.2));\r\n    border-radius: 5px 5px 0 0;\r\n  }\r\n`\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport s from \"./Settings.module.css\"\r\nimport {LimitValueInput} from \"./LimitValueInput\";\r\nimport styled from \"styled-components\";\r\n\r\ntype SettingsPropsType = {\r\n    error: string\r\n    visible: boolean\r\n    maxValue: number\r\n    minValue: number\r\n    // minChangedCallback: (newValue: number) => void\r\n    // maxChangedCallback: (newValue: number) => void\r\n    limitsChangedCallback: (newMax: number, newMin: number) => void\r\n}\r\n\r\nexport const Settings = (props: SettingsPropsType) => {\r\n\r\n    const [minValue, setMinValue] = useState<number>(props.minValue)\r\n    const [maxValue, setMaxValue] = useState<number>(props.maxValue)\r\n    const [error, setError] = useState<boolean>(false)\r\n\r\n    const validateNewMax = (newMax: number) => {\r\n\r\n        if (newMax > minValue) {\r\n            setError(false)\r\n            setMaxValue(newMax)\r\n            // limitsChangedHandler()\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    const validateNewMin = (newMin: number) => {\r\n        if (newMin < maxValue) {\r\n            setError(false)\r\n            setMinValue(newMin)\r\n            // limitsChangedHandler()\r\n\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n\r\n    const limitsChangedHandler = () => {\r\n        props.limitsChangedCallback(maxValue, minValue)\r\n    }\r\n\r\n    useEffect(() => {\r\n        props.limitsChangedCallback(maxValue, minValue)\r\n    }, [maxValue, minValue])\r\n\r\n    let settingsClassName = `${props.visible ? s.settingsVisible : s.settingsInvisible}`\r\n    // let settingsClassName = `${s.settingsVisible} ${s.settingsWrapper}`\r\n    // let settingsClassName = `${s.settingsWrapper}`\r\n    // let settingsClassName = `${props.visible ? s.showHidden : s.slowlyHide} ${s.settingsWrapper}`\r\n\r\n\r\n    return (\r\n        <SettingsWrapper className={settingsClassName}>\r\n            <LimitValueInput label={\"max value\"} currentValue={maxValue}\r\n                             callback={(newValue) => validateNewMax(newValue)}/>\r\n            <LimitValueInput label={\"min value\"} currentValue={minValue}\r\n                             callback={(newValue) => validateNewMin(newValue)}/>\r\n            {/*<div className={s.paramWrapper}>*/}\r\n            {/*    <label>min value</label>*/}\r\n            {/*    <input value={minValue} type=\"number\" min={\"0\"} onChange={validateNewMin}/>*/}\r\n            {/*    <div className={s.buttonContainer}>*/}\r\n            {/*        <button className={s.settingsButton}>+</button>*/}\r\n            {/*        <button className={s.settingsButton}>-</button>*/}\r\n            {/*    </div>*/}\r\n            {/*</div>*/}\r\n        </SettingsWrapper>\r\n    );\r\n};\r\n\r\n\r\nconst SettingsWrapper = styled.div`\r\n  /*position: relative;*/\r\n  z-index: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  background-color: #3a4042;\r\n  width: 250px;\r\n  heigth: 500px;\r\n  border: 3px solid #8ecccc;\r\n  border-bottom: none;\r\n  border-radius: 10px 10px 0 0;\r\n  box-shadow: 0 4px 8px 0 rgb(33, 33, 33), 0 6px 20px 0 rgb(33, 33, 33);\r\n  /*max-height: 0;*/\r\n  /*overflow: hidden;*/\r\n`\r\n\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport s from \"./App.module.css\";\nimport {Indicator} from \"./Indicator\";\nimport {Button} from \"./Button\";\nimport {Settings} from \"./Settings\";\nimport styled from \"styled-components\";\n\nfunction App() {\n\n    //BLL should be placed in localStorage to imitate server data ?\n    // let MIN_VALUE = 0;\n    // let MAX_VALUE = 5;\n\n    // const [limits, setLimits] = useState<Array<number>>([0, 1])\n    const [tempLimitsValues, setTempLimitsValues] = useState<Array<number>>([0, 0]) //how do I use set if inputs for max/min live in another component?\n\n    const [minValue, setMinValue] = useState<number>(0)\n    const [maxValue, setMaxValue] = useState<number>(5)\n\n    const [counter, setCounter] = useState<number>(minValue)\n    const [error, setError] = useState('')\n    const [paramsVisible, setParamsVisible] = useState(false)\n\n    const incrementCounter = () => {\n        debugger\n        if (!paramsVisible && counter < maxValue) {\n            setError('')\n            setCounter(counter + 1)\n        }\n        if (paramsVisible) {\n            setError('set your counter')\n        }\n    }\n\n    const resetCounter = () => {\n        setCounter(minValue) //no rerender if min have not changed\n    }\n    const setLimitsHandler = () => {\n        if (paramsVisible) {\n            // MIN_VALUE = minValue\n            // MAX_VALUE = maxValue\n            setMaxValue(tempLimitsValues[0])\n            setMinValue(tempLimitsValues[1])\n            localStorage.setItem('maxValue', JSON.stringify(maxValue))\n            localStorage.setItem('minValue', JSON.stringify(minValue))\n            setError('')\n            setParamsVisible(false)\n            // resetCounter()\n        } else {\n            setParamsVisible(true)\n        }\n    }\n    const changeTempLocalState = (max: number, min: number) => {\n        debugger\n        setTempLimitsValues([max, min])\n    }\n\n    useEffect(() => {\n        resetCounter()\n    }, [maxValue, minValue])\n\n    let mainDisplayClassName = `${counter === maxValue ? s.limitReached : \"\"} ${error ? s.errorMessage : \"\"}`\n\n    return (\n        <CounterWrapper>\n            <Settings visible={paramsVisible}\n                      error={error}\n                      maxValue={maxValue}\n                      minValue={minValue}\n                      limitsChangedCallback={(max, min) => {\n                          changeTempLocalState(max, min)\n                      }}\n            />\n            <div className={s.mainBoardWrapper}>\n                {/*<Indicator value={counter}/>*/}\n                <CounterDisplay>\n                    <CounterDisplayMainValue className={mainDisplayClassName}>\n                        {error ? error : counter}\n                    </CounterDisplayMainValue>\n                    <div className={s.currentSetContainer}>\n                        <div className={s.currentSet}>Current max value: {maxValue}</div>\n                        <div className={s.currentSet}>Current start value: {minValue}</div>\n                    </div>\n                </CounterDisplay>\n                <div className={s.buttonContainer}>\n                    <Button disabled={counter === maxValue || Boolean(error)}\n                            name={\"inc\"}\n                            callback={incrementCounter}\n                            indicatorValue={counter}/>\n                    <Button disabled={counter === minValue || Boolean(error)}\n                            name={\"reset\"}\n                            callback={resetCounter}\n                            indicatorValue={counter}/>\n                    <Button disabled={false}\n                            name={\"set\"}\n                            callback={setLimitsHandler}\n                            indicatorValue={counter}/>\n                </div>\n            </div>\n        </CounterWrapper>\n\n    )\n}\n\n\nconst CounterWrapper = styled.div`\n  /*border: 2px solid black;*/\n  width: 330px;\n  height: 500px;\n  display: flex;\n  flex-direction: column;\n  /*flex-wrap: wrap;*/\n  justify-content: center;\n  align-items: center;\n\n`\n\nconst CounterDisplay = styled.div`\n  position: relative;\n  background-color: #50717b; /*for compatibility with older browsers*/\n  background-image: linear-gradient(#50717b, #8ecccc);\n  /*background-color: #8ecccc;*/\n  height: 100px;\n  border-radius: 10px;\n  font-size: 50px;\n  text-align: center;\n  color: #3a4042;\n  font-weight: bold;\n  /*border: 1px solid red;*/\n  display: flex;\n  flex-direction: column;\n  box-shadow: 0px 1px 4px -2px #333;\n  justify-content: flex-end;\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 2px;\n    left: 2px;\n    width: calc(100% - 4px);\n    height: 50%;\n    /*width: 300px;*/\n    background: linear-gradient(rgba(255, 255, 255, 0.8), rgba(255, 255, 255, 0.2));\n    border-radius: 10px 10px 0 0;\n  }\n`\n\nconst CounterDisplayMainValue = styled.div`\n  //border: 1px solid yellow;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n`\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainBoardWrapper\":\"App_mainBoardWrapper__1Edg5\",\"buttonContainer\":\"App_buttonContainer__1u1YE\",\"limitReached\":\"App_limitReached__3FuQa\",\"currentSetContainer\":\"App_currentSetContainer__3VfPz\",\"currentSet\":\"App_currentSet__3CA0B\",\"glass\":\"App_glass__3tH8A\",\"errorMessage\":\"App_errorMessage__dil70\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Settings_error__1O0fH\",\"paramWrapper\":\"Settings_paramWrapper__4e0Uq\",\"settingsInvisible\":\"Settings_settingsInvisible__2elTn\",\"settingsVisible\":\"Settings_settingsVisible__2PQ5Z\",\"hidden\":\"Settings_hidden__cVJfS\",\"slowlyHide\":\"Settings_slowlyHide__32BkF\",\"showHidden\":\"Settings_showHidden__o8Oo-\"};"],"sourceRoot":""}